!function(){"use strict";class e{constructor(e,t,s,n,r,i){let{name:o,link:a,likes:l,_id:u,owner:c}=e;this._owner=c,this._name=o,this._link=a,this._templateSelector=t,this._handleCardClick=s,this._handleDeleteClick=n,this._handleHeartClick=r,this._cardId=u,this._userId=i,this._likes=l,this._likesNum=l?l.length:0}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}_handleImageClick(e){e.preventDefault(),this._handleCardClick(e.target.src,this._name)}_handleDeleteIconClick(e){this._handleDeleteClick(e,this._cardId)}_handleLikeClick(e){e.preventDefault(),e.target.classList.toggle("element__like_active"),this._handleHeartClick(this._cardId,!e.target.classList.contains("element__like_active"),this._updateCard.bind(this))}_setEventListeners(){this._imageElement.addEventListener("click",(e=>this._handleImageClick(e))),this._deleteElement.addEventListener("click",(e=>{e.preventDefault(),this._handleDeleteIconClick(this._deleteElement.closest(".element"))})),this._likes.forEach((e=>{e._id===this._userId&&this._likeElement.classList.add("element__like_active")})),this._likeElement.addEventListener("click",(e=>this._handleLikeClick(e)))}getCard(){return this._element=this._getTemplate(),this._imageElement=this._element.querySelector(".element__image"),this._nameElement=this._element.querySelector(".element__box").querySelector(".element__name"),this._deleteElement=this._element.querySelector(".element__delete-button"),this._likeElement=this._element.querySelector(".element__like"),this._likesNumElement=this._element.querySelector(".element__count"),this._userId===this._owner._id&&(this._deleteElement.style.visibility="visible"),this._imageElement.src=this._link,this._imageElement.alt=this._name,this._nameElement.textContent=this._name,this._likesNumElement.textContent=this._likesNum,this._setEventListeners(),this._element}_updateCard(e){this._likesNum=e,this._likesNumElement.textContent=this._likesNum}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),this._errorElement.textContent=t,e.classList.add(this._inputErrorClass)}_hideInputError(e){this._errorElement=this._formElement.querySelector(".".concat(e.id,"-error")),this._errorElement.textContent="",e.classList.remove(this._inputErrorClass)}disableButton(){this._buttonElement.disabled=!0,this._buttonElement.classList.add(this._inactiveButtonClass)}_enableButton(){this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._inactiveButtonClass)}_checkIfValid(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_checkIfFormValid(){return this._inputsList.every((e=>e.validity.valid&&""!==e.value))}_toggleSubmitBtnState(){this._checkIfFormValid()?this._enableButton():this.disableButton()}_setEventListeners(){this._inputsList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._inputsList.forEach((e=>{e.addEventListener("input",(t=>{t.preventDefault(),this._toggleSubmitBtnState(),this._checkIfValid(e)}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}}function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class r{constructor(e){n(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.closePopup()})),n(this,"_handleOverlayClick",(e=>{e.target.classList.contains("popup")&&this.closePopup()})),this._popup=document.querySelector(e)}closePopup(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("click",this._handleOverlayClick)}openPopup(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),this._popup.addEventListener("click",this._handleOverlayClick)}_addCloseOnClickEvent(){this._closeBtn=this._popup.querySelector(".popup__close"),this._closeBtn.addEventListener("click",(e=>{e.preventDefault(),this.closePopup()}))}setEventListeners(){this._addCloseOnClickEvent()}}class i extends r{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".popup__form"),this._buttonValue=this._popup.querySelector(".popup__button").value}_getInputValues(){return this._inputList=this._popup.querySelectorAll(".popup__input"),this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this.renderLoading(!0),this._handleFormSubmit(this._getInputValues(),this._element,this._id)}))}setSubmitAction(e,t){this._element=e,this._id=t}renderLoading(e){this._popup.querySelector(".popup__button").value=e?"Saving...":this._buttonValue}closePopup(){super.closePopup(),this._form.reset()}}const o=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),l=document.querySelector(".popup__input_type_name"),u=document.querySelector(".popup__input_type_hobby"),c=document.querySelector(".popup__form_type_profile"),h=document.querySelector(".popup__form_type_card"),_=document.querySelector(".popup__form_type_avatar"),p=(document.querySelector(".profile__name"),document.querySelector(".profile__interest"),document.querySelector(".profile__overlay-container")),d={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},m=new class{constructor(e){let{baseUrl:t,headers:s}=e;this.url=t,this.headers=s}loadUserInfo(){return fetch("".concat(this.url,"/users/me"),{headers:{authorization:this.headers.authorization}}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}getInitialCards(){return fetch("".concat(this.url,"/cards"),{headers:{authorization:this.headers.authorization}}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}loadData(){return Promise.all([this.loadUserInfo,this.getInitialCards])}editProfileData(e,t){return fetch("".concat(this.url,"/users/me"),{method:"PATCH",headers:{authorization:this.headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}addNewCard(e,t){return fetch("".concat(this.url,"/cards"),{method:"POST",headers:{authorization:this.headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}deleteCard(e){return fetch("".concat(this.url,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this.headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({likes:[],_id:e})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}likeCard(e){return fetch("".concat(this.url,"/cards/likes/").concat(e),{method:"PUT",headers:{authorization:this.headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({_id:e})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}unlikeCard(e){return fetch("".concat(this.url,"/cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this.headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({_id:e})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}changeProfileAvatar(e){return fetch("".concat(this.url,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this.headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status))))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"82cfb778-0110-4074-beef-5e31af26dd47"}}),f=new s({items:[],renderer:e=>{q(e)}},".elements"),E=new class{constructor(e){let{userNameSelector:t,userJobSelector:s}=e;this._userName=document.querySelector(t),this._userJob=document.querySelector(s),this._userAvatar=document.querySelector(".profile__image")}getUserInfo(){return{userName:this._userName.textContent,userJob:this._userJob.textContent,userId:this._userId,userAvatar:this._userAvatar.src}}setUserInfo(e,t,s,n){this._userName.textContent=e,this._userJob.textContent=t,this._userId=s,this._userAvatar.src=n}}({userNameSelector:".profile__name",userJobSelector:".profile__interest"}),v=new i(".popup_type_confirm",(function(e,t,s){let{}=e;m.deleteCard(s).then((e=>{t.remove(),v.closePopup()})).catch((e=>console.log(e))).finally((()=>v.renderLoading(!1)))}));v.setEventListeners();const y=new i(".popup_type_avatar",(function(e){const{url:t}=e;m.changeProfileAvatar(t).then((e=>{E.setUserInfo(e.name,e.about,e._id,e.avatar),y.closePopup()})).catch((e=>console.log(e))).finally((()=>y.renderLoading(!1)))}));y.setEventListeners();const k=new class extends r{constructor(e){super(e)}closePopup(){super.closePopup()}openPopup(e,t){super.openPopup(),this._addImageAndCaption(e,t)}_addImageAndCaption(e,t){this._popupImageElement=document.querySelector(".popup__card-image"),this._popupNameElement=document.querySelector(".popup__name"),this._popupImageElement.src=e,this._popupImageElement.alt=t,this._popupNameElement.textContent=t}}(".popup_type_image");k.setEventListeners();const b=new i(".popup_type_card",(function(e){const{title:t,image_link:s}=e;m.addNewCard(t,s).then((e=>{q(e),b.closePopup()})).finally((()=>b.renderLoading(!1)))}));b.setEventListeners();const C=new i(".popup_type_profile",(function(e){const{name:t,hobby:s}=e;m.editProfileData(t,s).then((e=>{E.setUserInfo(e.name,e.about,e._id,e.avatar),C.closePopup()})).finally((()=>C.renderLoading(!1)))}));C.setEventListeners();const S=new t(d,h);S.enableValidation();const g=new t(d,_);function L(e,t,s){t?m.unlikeCard(e).then((e=>s(e.likes.length))):m.likeCard(e).then((e=>s(e.likes.length)))}function I(e,t){k.openPopup(e,t)}function P(e,t){v.setSubmitAction(e,t),v.openPopup()}function q(t){const s=new e(t,"#element",I,P,L,E.getUserInfo().userId).getCard();f.addItem(s)}g.enableValidation(),g.disableButton(),new t(d,c).enableValidation(),a.addEventListener("click",(()=>{b.openPopup(),S.disableButton()})),o.addEventListener("click",(()=>{C.openPopup(),function(){const{userName:e,userJob:t}=E.getUserInfo();l.value=e,u.value=t}()})),p.addEventListener("click",(()=>{y.openPopup()})),m.loadData(),m.loadUserInfo().then((e=>E.setUserInfo(e.name,e.about,e._id,e.avatar))).catch((e=>console.log(e))),m.getInitialCards().then((e=>{new s({items:e,renderer:e=>{q(e)}},".elements").renderItems()})).catch((e=>console.log(e)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,